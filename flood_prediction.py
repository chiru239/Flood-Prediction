# -*- coding: utf-8 -*-
"""Flood Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JViW8bWDBd0JbvH_U93Z6Pje_nzqRrNv
"""

import pandas as pd
import matplotlib.pyplot as plt

import numpy as np
x=pd.read_csv("/content/kerala.csv")
y=pd.read_csv("/content/kerala.csv")

y1=list(x["YEAR"])
x1=list(x["Jun-Sep"])
z1=list(x["JUN"])
w1=list(x["MAY"])

plt.plot(y1, x1,'*')
plt.show()

flood=[]
june=[]
sub=[]

#CREATING A NEW COLOUMN WITH BINARY CLASSIFICATION DEPENDING IF THAT YEAR HAD FLOODED OR NOT, USING RAINFALL OF THAT YEAR AS THRESHOLD
#print(x1[114])
for i in range(0,len(x1)):
    if x1[i]>2400:
        flood.append('1')
    else:
        flood.append('0')

#print(len(x1))

#APPROAXIMATELY FINDING THE RAINFALL DATA FOR 10 DAYS FOR THE MONTH OF JUNE IN EVERY YEAR FROM 1901 TO 2015
for k in range(0,len(x1)):
    june.append(z1[k]/3)

#FINDING THE INCREASE IN RAINFALL FROM THE MONTH OF MAY TO THE MONTH OF JUNE IN EVERY YEAR FROM 1901 TO 2015
for k in range(0,len(x1)):
    sub.append(abs(w1[k]-z1[k]))

#print(len(flood),len(x1))
df = pd.DataFrame({'flood':flood})
df1=pd.DataFrame({'per_10_days':june})

x["flood"]=flood
x["avgjune"]=june
x["sub"]=sub

#SAVING THE NEW CSV FILE WITH THE NEW COLOUMNS
x.to_csv("out1.csv")
print((x))

import scipy
from scipy.stats import spearmanr

from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import scale
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

# Select the desired columns from the DataFrame
X = x.iloc[:, [16, 20, 21]].values

# Extract the target variable
y = x.iloc[:, 19].values

# Split the data into training and testing sets
(X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=0)

# Create a Logistic Regression model
model = LogisticRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Evaluate the model on the test data
score = model.score(X_test, y_test)

# Print the accuracy of the model
print(f"Accuracy: {score}")

from sklearn.linear_model import LinearRegression

# Define the linear regression model
Lr = LinearRegression()

# Given data
data = [
    [275, 130, 260],  # Data 1
    [200, 400, 300],  # Data 2
    [50, 300, 205]    # Data 3
]

# Train the model with available data
X_train = [[q, w, e] for q, w, e in data]
y_train = [0, 1, 0]  # Assuming 0 represents no severe flood, and 1 represents severe flood
Lr.fit(X_train, y_train)

# New data for prediction
new_data = [
    [q1, w1, e1],  # Data 1
    [q2, w2, e2],  # Data 2
    [50, 300, 205] # Data 3
]

# Predict the outcomes for new data
predictions = Lr.predict(new_data)

# Print predictions
for i, prediction in enumerate(predictions):
    if int(prediction) == 1:
        print("Data", i+1, "prediction:", prediction, "- possibility of severe flood")
    else:
        print("Data", i+1, "prediction:", prediction, "- no chance of severe flood")

import urllib
from bs4 import BeautifulSoup
import pandas as pd


#-----------------------------------------------------------------------
def get_table(url):
    return(df)

#------------------------------------------------------------------------------------

above_normal = "http://www.india-water.gov.in/ffs/flood-forecasted-bulletins/for-level-forecasted-sites/low-flood-situation-report/"
severe="http://www.india-water.gov.in/ffs/flood-forecasted-bulletins/for-level-forecasted-sites/high-flood-situation-report/"
extreme="http://www.india-water.gov.in/ffs/flood-forecasted-bulletins/for-level-forecasted-sites/unprecedented-flood-situation-report-00001/"

AN=get_table(above_normal)
SV=get_table(severe)
EX=get_table(extreme)

if AN.empty:
    print('NO FLOODS IN INDIA')
else:
    print("FLOOD IN....")
    print(AN,'\n')
    AN.to_csv("above_normal.csv")



if SV.empty:
    print('NO SEVERE FLOODS IN INDIA,AT THE MOMENT')
else:
    print("FLOOD IN....")
    print(SV,'\n')
    SV.to_csv("severe.csv", sep='\t')

if EX.empty:
    print('NO EXTREME FLOODS IN INDIA,AT THE MOMENT')
else:
    print("FLOOD IN....")
    print(EX)
    EX.to_csv("extreme.csv", sep='\t')